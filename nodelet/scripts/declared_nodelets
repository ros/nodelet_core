#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.



import rospkg
from xml.dom import minidom
import xml

nodelet_files = []

rp = rospkg.RosPack()
for p in rp.get_depends_on('nodelet', implicit=False):
    #print "Processing package %s to find declared nodelets"%p
    manifest = rp.get_manifest(p)
    for e in manifest.exports:
        try:
            if e.__dict__['tag'] == 'nodelet':
                plugin_file = e.get('plugin')
                if plugin_file:
                    plugin_file = plugin_file.replace('${prefix}', rp.get_path(p))
                    nodelet_files.append(plugin_file)
        except Exception, ex:
            print ex 

declared_nodelets = []

for f in nodelet_files:
    with open(f) as fh:
        try:
            dom = minidom.parse(fh)
            for lib in dom.getElementsByTagName('library'):
                for name in lib.getElementsByTagName('class'):
                    declared_nodelets.append(name.getAttribute('name'))
        except xml.parsers.expat.ExpatError, ex:
            "failed to parse file %s"%f

#print "\n\nDECLARED NODELETS\n================="
for n in declared_nodelets:
    print n
